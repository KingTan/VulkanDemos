#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

#include "lib/Common.glsl"
#include "lib/RandomSequence.glsl"
#include "lib/LightCommon.glsl"
#include "lib/CameraCommon.glsl"
#include "lib/LightSky.glsl"

void main() 
{
	
	uvec2 bufferSize = uvec2(uint(globalParam.viewSize.x), uint(globalParam.viewSize.y));
	uint linearIndex = gl_LaunchIDNV.x + (gl_LaunchIDNV.y * bufferSize.x); 
	RandomSequence randSequence;
	RandomSequenceInitialize(randSequence, linearIndex, uint(globalParam.samplingData.x));

	uint rayCounter  = 0;
	uint sampleIndex = 0;
	uint sampleCount = 1;
	vec3 pixelColor  = vec3(0, 0, 0);

	for (uint i = 0; i < sampleCount; ++i)
	{
		vec3 irradiance = vec3(0.0, 0.0, 0.0);

		CameraInfo camera;
		camera.pos = globalParam.pos;
		camera.invProj = globalParam.invProj;
		camera.invView = globalParam.invView;
		camera.viewSize = globalParam.viewSize;

		RayDesc ray;
		uvec2 pixel;
		float emitterPdf;
		SampleEmitter(camera, gl_LaunchIDNV.xy, randSequence, sampleIndex, 0, 0, ray, pixel, emitterPdf);
		if (emitterPdf <= 0.0) {
			continue;
		}
		
		vec3 rayThroughput = vec3(1.0, 1.0, 1.0);
		float rayPdf = 1.0;

		// TODO:texture lod
		RayCone rayCone;
		rayCone.spreadAngle = globalParam.samplingData.y;

		traceNV(topLevelAS, gl_RayFlagsOpaqueNV, 0xFF, 0, 0, 0, ray.origin, ray.tMin, ray.direction, ray.tMax, 0);
		rayCounter += 1;

		float materialPdf = 0.0;
		uint bounces = 0;
		uint maxBounces = uint(globalParam.samplingData.z);
		while (bounces < maxBounces)
		{
			// environment contribution
			if (payLoadInfo.hitT < 0)
			{
				int skyLightId = 0;
				vec3 environmentRadiance = vec3(0.0, 0.0, 0.0);
				SkyEnvLightEvalLight(skyLightId, ray.direction, ray, environmentRadiance);

				if (length(environmentRadiance) > 0.0)
				{

				}

				// irradiance += environmentRadiance;
				irradiance = environmentRadiance;

				break;
			}

			bounces += 1;
		}

		pixelColor = irradiance;
	}

	// pixelColor = pixelColor / sampleCount;
	// pixelColor = pow(pixelColor, vec3(1.0 / 2.2));

	// pixelColor.xyz = RandomSequenceGenerateSample3D(randSequence, sampleIndex);

	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(pixelColor, 0.0));
}
